// ChatRoom.jsx

import React, { useEffect, useState } from "react";
import io from "socket.io-client";

const socket = io("http://localhost:5000"); // Replace with your server URL

const ChatRoom = ({ room }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");

  useEffect(() => {
    socket.emit("joinRoom", room);

    socket.on("message", (message) => {
      setMessages((prevMessages) => [...prevMessages, message]);
    });

    return () => {
      socket.emit("leaveRoom", room);
    };
  }, [room]);

  const handleSendMessage = () => {
    socket.emit("sendMessage", newMessage, room);
    setNewMessage("");
  };

  return (
    <div>
      <h2>Chat Room: {room}</h2>
      <div>
        {messages.map((message, index) => (
          <p key={index}>{message}</p>
        ))}
      </div>
      <div>
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
        />
        <button onClick={handleSendMessage}>Send Message</button>
      </div>
    </div>
  );
};

export default ChatRoom;
// TaskBoard.jsx

import React, { useEffect, useState } from "react";
import io from "socket.io-client";

const socket = io("http://localhost:5000"); // Replace with your server URL

const TaskBoard = ({ room }) => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  useEffect(() => {
    socket.emit("joinRoom", room);

    socket.on("taskUpdate", (updatedTasks) => {
      setTasks(updatedTasks);
    });

    return () => {
      socket.emit("leaveRoom", room);
    };
  }, [room]);

  const handleAddTask = () => {
    socket.emit("addTask", newTask, room);
    setNewTask("");
  };

  const handleDeleteTask = (taskId) => {
    socket.emit("deleteTask", taskId, room);
  };

  return (
    <div>
      <h2>Task Board for Room: {room}</h2>
      <div>
        {tasks.map((task) => (
          <div key={task.id}>
            <p>{task.title}</p>
            <button onClick={() => handleDeleteTask(task.id)}>Delete</button>
          </div>
        ))}
      </div>
      <div>
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
        />
        <button onClick={handleAddTask}>Add Task</button>
      </div>
    </div>
  );
};

export default TaskBoard;
